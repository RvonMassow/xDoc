import org::eclipse::xtext::xdoc::xdoc;
import org::eclipse::emf::ecore;
import org::eclipse::xtext::common::types;

lstEscapeToTex():
	"ß";

escapeLatexChars(String s):
	s.replaceAll("\\$", "\\\\\\$").replaceAll("\\{", "\\\\{").replaceAll("\\}", "\\\\}")
		.replaceAll("\\\\(?![{}$])", "\\\\textbackslash{}")
		.replaceAll("#", "\\\\#").replaceAll("%", "\\\\%")
		.replaceAll("_", "\\\\_").replaceAll("\\^", "\\\\textasciicircum{}")
		.replaceAll("&", "\\\\&").replaceAll("~", "\\\\textasciitilde{}");

String unescapeXdocChars(String s):
	JAVA templates.util.StringFormatter.unescapeXdocChars(java.lang.String);
	
prepareListingsString(String s):
	s.replaceAll("^\n", "");

escapeHTMLChars(String s):
	s.replaceAll("&", "&amp;").replaceAll("'", "&apos;")
		.replaceAll("<", "&lt;").replaceAll(">", "&gt;");

formatCode(String text, LangDef language):
	highlightKeywords(text.escapeHTMLChars().replaceAll(" ", "&nbsp;").replaceAll("\t", "&nbsp;&nbsp;&nbsp;&nbsp;").replaceAll("\n", "<br />\n"), language);

// simple heuristic to determine if code is meant to be inline
boolean inline(CodeBlock c):
	c.contents.size == 1 && !c.contents.first().toString().contains("\n");

boolean block(TextOrMarkup c):
	(TextPart.isInstance(c.contents.first())
		&& ((TextPart)c.contents.first()).text.matches("^\\s*$") 
		&& CodeBlock.isInstance(c.contents.get(1)))
	|| (CodeBlock.isInstance(c.contents.first()) && !inline((CodeBlock)c.contents.first()));


remWS(String s):
	s.replaceAll("\\s", "");

isFirst(AbstractSection as):
	false;
	
isFirst(Section2 s):
	((Section)s.eContainer()).subSections.first() == s;

isFirst(Section s):
	((Chapter)s.eContainer()).subSections.first() == s;

isFirst(Chapter c):
	((Document)c.eContainer()).chapters.first() == c;

isLast(AbstractSection as):
	false;

isLast(Section2 s):
	((Section)s.eContainer()).subSections.last() == s;

isLast(Section s):
	((Chapter)s.eContainer()).subSections.last() == s;

isLast(Chapter c):
	((Document)c.eContainer()).chapters.last() == c;

sibling(AbstractSection as, Integer i):
	as;

String dottedSimpleName(JvmDeclaredType type):
		if (type.declaringType != null) then
			type.declaringType.dottedSimpleName() + '.' + type.simpleName
		else
			type.simpleName;

sibling(Chapter c, Integer i):
	let d =((Document)c.eContainer()):
		d.chapters.get(d.chapters.indexOf(c) + i);

sibling(Section s, Integer i):
	let c =((Chapter)s.eContainer()):
		c.subSections.get(c.subSections.indexOf(s) + i);

sibling(Section2 c, Integer i):
	let d =((Section)c.eContainer()):
		d.subSections.get(d.subSections.indexOf(c) + i);

String copy(String basePath, ImageRef imageRef, String target):
	JAVA templates.util.CopyUtil.copy(java.lang.String, org.eclipse.xtext.xdoc.xdoc.ImageRef, java.lang.String);

String percentToFloat(String percent):
	JAVA templates.util.StringFormatter.percentToFloat(java.lang.String);

String encode(String s):
	JAVA templates.util.StringFormatter.encode(java.lang.String);

CodeBlock removeIndent(CodeBlock cb):
	JAVA templates.util.StringFormatter.removeIndent(org.eclipse.xtext.xdoc.xdoc.CodeBlock);

CodeBlock highlightCodeBlock(CodeBlock cb):
	JAVA templates.util.StringFormatter.highlightCodeBlock(org.eclipse.xtext.xdoc.xdoc.CodeBlock);
	
CodeBlock removeXdocEscapeFromCode(CodeBlock cb):
	JAVA templates.util.StringFormatter.removeXdocEscapeFromCode(org.eclipse.xtext.xdoc.xdoc.CodeBlock);

String calcStyle(ImageRef img):
	JAVA templates.util.PDFImageUtil.calcStyle(org.eclipse.xtext.xdoc.xdoc.ImageRef);

Void throwUnsupportedOperation(String msg) :
	throwUnsupportedOperation(msg,'null');
	
Void throwUnsupportedOperation(String msg, Object param) :
	JAVA templates.util.Errors.throwUnsupportedOperation(java.lang.String, java.lang.Object);
	
Void storeLink(Link link):
	JAVA templates.util.StringFormatter.storeLink(org.eclipse.xtext.xdoc.xdoc.Link);

Void clearStoredLinks():
	JAVA templates.util.StringFormatter.clearStoredLinks();

Set[String] getStoredLinks():
	JAVA templates.util.StringFormatter.getStoredLinks();

String highlightKeywords(String string, LangDef language):
	JAVA templates.util.StringFormatter.highlightKeywords(java.lang.String, org.eclipse.xtext.xdoc.xdoc.LangDef);
	
String toString(TextOrMarkup txt) :
	JAVA org.eclipse.xtext.xdoc.XdocUtil.toString(java.lang.Object);
